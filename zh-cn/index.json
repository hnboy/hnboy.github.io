[{"categories":null,"content":"隐私政策 本网站尊重并保护所有使用服务用户的个人隐私权。为了给您提供更准确、更有个性化的服务，本网站会按照本隐私权政策的规定使用和披露您的个人信息。但本网站将以高度的勤勉、审慎义务对待这些信息。除本隐私权政策另有规定外，在未征得您事先许可的情况下，本网站不会将这些信息对外披露或向第三方提供。本网站会不时更新本隐私权政策。 您在同意本网站服务使用协议之时，即视为您已经同意本隐私权政策全部内容。本隐私权政策属于本网站服务使用协议不可分割的一部分。 ","date":"2025-08-11","objectID":"/zh-cn/privacy/:1:0","tags":null,"title":"隐私政策","uri":"/zh-cn/privacy/"},{"categories":null,"content":"信息的收集和使用 为了更好地运营本网站，我们可能会收集您的一些非个人身份信息，例如浏览器类型、操作系统类型、IP地址等，以便我们进行流量分析，从而改善网站服务。 当您发表评论时，我们会收集您在表单中填写的信息（如昵称、邮箱地址），这些信息将用于在页面上显示您的评论。 ","date":"2025-08-11","objectID":"/zh-cn/privacy/:1:1","tags":null,"title":"隐私政策","uri":"/zh-cn/privacy/"},{"categories":null,"content":"Cookie 本网站使用 Cookie 来提升您的用户体验。Cookie 是一个小型文本文件，当您访问网站时，它会储存在您的电脑上。我们使用 Cookie 来记住您的偏好设置，以及用于 Google AdSense 等第三方服务的分析和广告。 您可以选择禁用 Cookie，但这可能会影响您访问本网站部分功能的体验。 ","date":"2025-08-11","objectID":"/zh-cn/privacy/:1:2","tags":null,"title":"隐私政策","uri":"/zh-cn/privacy/"},{"categories":null,"content":"第三方服务 本网站使用了 Google AdSense 广告服务。Google 作为第三方供应商，会使用 Cookie 来在本网站上投放广告。Google 使用 DART Cookie，可以根据用户访问本网站及其他网站的记录来投放广告。用户可以通过访问 Google 广告和内容网络隐私政策来选择停用 DART Cookie。 ","date":"2025-08-11","objectID":"/zh-cn/privacy/:1:3","tags":null,"title":"隐私政策","uri":"/zh-cn/privacy/"},{"categories":null,"content":"信息安全 我们采取适当的安全措施来保护您的信息免遭未经授权的访问、更改、披露或销毁。 ","date":"2025-08-11","objectID":"/zh-cn/privacy/:1:4","tags":null,"title":"隐私政策","uri":"/zh-cn/privacy/"},{"categories":null,"content":"政策变更 我们可能会不时修订本隐私政策。如果我们对本政策作出任何重大变更，我们会在网站上发布通知。 ","date":"2025-08-11","objectID":"/zh-cn/privacy/:1:5","tags":null,"title":"隐私政策","uri":"/zh-cn/privacy/"},{"categories":null,"content":"联系我们 如果您对本隐私政策有任何疑问，请通过 联系我们 页面与我们联系。 ","date":"2025-08-11","objectID":"/zh-cn/privacy/:1:6","tags":null,"title":"隐私政策","uri":"/zh-cn/privacy/"},{"categories":["others"],"content":"Kroki java11 kroki plantuml wavedrom 功能介绍 使用它在 AsciiDoc、Markdown、reStructuredText 和 Textile 文档中创建图表。 Demo 使用案例 Demo [plantuml, puml, png] .... @startuml partition TestMain{ :Test; :Start; } partition Debug{ :run; :end; } @enduml .... [wavedrom, 1, svg] .... { signal : [ { name: \"clk\", wave: \"p.......\" }, { name: \"bus\", wave: \"x.3456..\", data: \"head body tail data\" }, { name: \"wire\", wave: \"0.1...x.\" }, ]} .... [plantuml, 1, svg] .... @startmindmap skinparam monochrome true + OS ++ Ubuntu +++ Linux Mint +++ Kubuntu +++ Lubuntu +++ KDE Neon ++ LMDE ++ SolydXK ++ SteamOS ++ Raspbian -- Windows 95 -- Windows 98 -- Windows NT --- Windows 8 --- Windows 10 @endmindmap .... ","date":"2023-11-25","objectID":"/zh-cn/kroki/:0:0","tags":["plantuml","web"],"title":"Kroki","uri":"/zh-cn/kroki/"},{"categories":[],"content":"Arch Linux Pip安装包的时候报错 报错信息如下 × This environment is externally managed ╰─\u003e To install Python packages system-wide, try apt install python3-xyz, where xyz is the package you are trying to install. If you wish to install a non-Debian-packaged Python package, create a virtual environment using python3 -m venv path/to/venv. Then use path/to/venv/bin/python and path/to/venv/bin/pip. Make sure you have python3-full installed. If you wish to install a non-Debian packaged Python application, it may be easiest to use pipx install xyz, which will manage a virtual environment for you. Make sure you have pipx installed. See /usr/share/doc/python3.11/README.venv for more information. 解决方法: 删除文件 /usr/lib/python3.x/EXTERNALLY-MANAGED 修改pip conf文件为如下 ~/.config/pip/pip.conf [global] index-url = https://pypi.tuna.tsinghua.edu.cn/simple break-system-packages = true [install] trusted-host = https://pypi.tuna.tsinghua.edu.cn","date":"2023-08-08","objectID":"/zh-cn/pip%E6%8A%A5%E9%94%99/:1:0","tags":[],"title":"pip安装包报错","uri":"/zh-cn/pip%E6%8A%A5%E9%94%99/"},{"categories":["kvm"],"content":"Libvirt可以通过qemu和OVMF来支持UEFI虚拟机，先安装edk2-ovmf,然后添加如下内容 /etc/libvirt/qemu.conf // /etc/libvirt/qemu.conf nvram = [ \"/usr/share/ovmf/x64/OVMF_CODE.fd:/usr/share/ovmf/x64/OVMF_VARS.fd\" ]","date":"2022-04-22","objectID":"/zh-cn/libvirt/:0:0","tags":["libvirt"],"title":"Libvirt","uri":"/zh-cn/libvirt/"},{"categories":[],"content":"炉石传说修改帧率方法： Windows系统： 直接在C:\\Users\\用户名\\AppData\\Local\\Blizzard\\Hearthstone 文件夹中的options.txt文档中分别添加就这两行命令就可以了：(AppData文件夹默认隐藏，如果没显示，请先百度“显示隐藏文件”，操作也比较简单) targetframerate=144 vsync=0 保存、重启炉石，第一次用可以用N卡自带的GeForce Experience、Fraps等软件自己看看帧数。 MacOS系统： 桌面最上面找到“前往”-“前往文件夹”，输入“/资源库”(或者输入英文“/library”)，点击前往(这个文件夹默认是隐藏的，所以一般方法进不去的) 然后进入Preferences/Blizzard/Hearthstone，应该就可以看见options.txt了，编辑添加代码： targetframerate=144 vsync=0 ","date":"2022-03-19","objectID":"/zh-cn/%E7%82%89%E7%9F%B3%E4%BC%A0%E8%AF%B4/:0:0","tags":[],"title":"炉石传说","uri":"/zh-cn/%E7%82%89%E7%9F%B3%E4%BC%A0%E8%AF%B4/"},{"categories":[],"content":"Linuax 下steam无法启动文明6,修改文明6配置文件 //路径如下： home/**/.steam/steam/steamapps/common/Sid Meier's Civilization VI //修改文件Civ6Sub 修改./gamode/Civ6Sub为 ./Civ6Sub","date":"2021-07-18","objectID":"/zh-cn/steam/:0:0","tags":[],"title":"Civid 6","uri":"/zh-cn/steam/"},{"categories":["linux"],"content":"ssh-key访问服务器","date":"2021-05-21","objectID":"/zh-cn/sshd/","tags":["linux"],"title":"sshd配置","uri":"/zh-cn/sshd/"},{"categories":["linux"],"content":"生成key MacBook-Pro:~ hnboy$ ssh-keygen Generating public/private rsa key pair. Enter file in which to save the key (/Users/hnboy/.ssh/id_rsa): /Users/hnboy/.ssh/test_rsa #询问保存路径，如果默认，则在当前用户的 ~/.ssh 目录下生成id_rsa文件。这里我们自定义一个key，取名：test_rsa Enter passphrase (empty for no passphrase): #如果你想用密码来保护你的证书，可以选择在这里输入。 Enter same passphrase again: #如果输入了密码，需要再次输入该密码 Your identification has been saved in /Users/hnboy/.ssh/test_rsa. Your public key has been saved in /Users/hnboy/.ssh/test_rsa.pub. The key fingerprint is: SHA256:V4RNi8fLUgeiCRMY6UJU8YR73SQ//JTgdSMBjyBJKws hnboy@MacBook-Pro.local The key's randomart image is: +---[RSA 2048]----+ | ...+BBo. o==. | | . +o.=.++B+oo | | .E...o.oBooB+.. | | ..oo. . *=oo | | ... S o+o | | . .. | | | | | | | +----[SHA256]-----+ 完成操作就生成一对key，再home/.ssh/路径下 ","date":"2021-05-21","objectID":"/zh-cn/sshd/:1:0","tags":["linux"],"title":"sshd配置","uri":"/zh-cn/sshd/"},{"categories":["linux"],"content":"将公钥安装到远程服务器上 使用scp或者rsync方法 rsync -av ~/.ssh/test_rsa.pub username@remote:~/.ssh/authorized_keys scp ~/.ssh/test_rsa.pub username@remote:~/.ssh/authorized_keys 使用ssh-copy-id ssh-copy-id -i ~/.ssh/test_rsa.pub username@remote","date":"2021-05-21","objectID":"/zh-cn/sshd/:2:0","tags":["linux"],"title":"sshd配置","uri":"/zh-cn/sshd/"},{"categories":["git"],"content":" git remote set-url origin \"http\"","date":"2021-05-19","objectID":"/zh-cn/git/:0:0","tags":["git"],"title":"Git","uri":"/zh-cn/git/"},{"categories":["Linux"],"content":"Gitlab安装","date":"2021-05-13","objectID":"/zh-cn/gitlab/","tags":["Linux"],"title":"Gitlab","uri":"/zh-cn/gitlab/"},{"categories":["Linux"],"content":"安装前 关闭防火墙和SELINUX ##关闭防火墙 systemctl stop firewalled ##关闭SELINUX sed -i 's/^SELINUX=.*/SELINUX=disabled/' /etc/selinux/config tip 也可以尝试让防火墙enable http/https firewall-cmd --permanent --add-service=http firewall-cmd --permanent --add-service=https ","date":"2021-05-13","objectID":"/zh-cn/gitlab/:1:0","tags":["Linux"],"title":"Gitlab","uri":"/zh-cn/gitlab/"},{"categories":["Linux"],"content":"安装 sudo EXTERNAL_URL=\"ip\" yum install -y gitlab-ee ","date":"2021-05-13","objectID":"/zh-cn/gitlab/:2:0","tags":["Linux"],"title":"Gitlab","uri":"/zh-cn/gitlab/"},{"categories":["Linux"],"content":"修改配置文件 修改配置文件 ##修改/ect/gitlab/gitlab.rb external_url \"https://gitlab.example.com\" ","date":"2021-05-13","objectID":"/zh-cn/gitlab/:3:0","tags":["Linux"],"title":"Gitlab","uri":"/zh-cn/gitlab/"},{"categories":["Linux"],"content":"启动 sudo gitlab-ctl reconfigure sudo gitlab-ctl restart","date":"2021-05-13","objectID":"/zh-cn/gitlab/:4:0","tags":["Linux"],"title":"Gitlab","uri":"/zh-cn/gitlab/"},{"categories":["ONFI"],"content":"Interface(SDR NVDDR NVDDR2/NVDDR3) IO bus 改名成DQ bus. 多了个DQS 信号，DQS为双向管脚。 DQS不能用于cmd和address cycle。在SDR mode下DQS应该被host 拉高，device ignore ， DQS沿对应data valid window。 NV-DDR interface WE_n (clk)代替clock signal. RE_n(W/R#)变成write/read 双向管脚信号. NV-DDR2/3 RE_N变成RE_t , RE_c DQS信号来做DQ data bus strobe. ","date":"2021-05-11","objectID":"/zh-cn/onfi/:1:0","tags":["ONFI"],"title":"NAND FLASH ONFI SPEC 4.0 ( 一 )","uri":"/zh-cn/onfi/"},{"categories":["ONFI"],"content":"ONFI VS Tole Tole同步模式下不用clock，写数据用DQS差分信号跳变沿触发，读数据用Host发的REN差分信号跳变沿发读request，DQS跳变沿输出数据。 ONFI2.0 增加NV-DDR，支持DDR操作，但是使用同步时钟来控制，所以边沿容易受干扰。ONFI3.0增加DDR2,ONFI4.0增加NV-DDR3,均支持DQS差分信号而不同同步时钟. ","date":"2021-05-11","objectID":"/zh-cn/onfi/:2:0","tags":["ONFI"],"title":"NAND FLASH ONFI SPEC 4.0 ( 一 )","uri":"/zh-cn/onfi/"},{"categories":["ONFI"],"content":"Sync(同步) VS Async(异步) 简单来说，需要时钟信号的就是同步NAND Flash，不需要时钟的就是异步NAND。 引脚的功能区别 同步模式下PIN8为W/R#pin, 异步模式下为RE#引脚 同步模式下PIN18为CLK引脚，异步模式下为WE#引脚 同步模式下PIN35不使用，异步模式下DQS信号. 异步模式下cmd address and data in/out ","date":"2021-05-11","objectID":"/zh-cn/onfi/:3:0","tags":["ONFI"],"title":"NAND FLASH ONFI SPEC 4.0 ( 一 )","uri":"/zh-cn/onfi/"},{"categories":["ONFI"],"content":"Data input/output Pausing host暂停data tinput/output SDR模式下将WE#和RE#置高即可暂停数据输入输出 NV-DDR模式通过将ALE/CLE置低可暂停数据输入输出 NV-DDR2/3模式可以通过保持RE#高或者低电平（即RE#不发生信号翻转即可）。也可以通过暂停DQS信号。在数据暂停阶段ODT是保持开的状态了（如果device enable 了ODT 模式） ","date":"2021-05-11","objectID":"/zh-cn/onfi/:4:0","tags":["ONFI"],"title":"NAND FLASH ONFI SPEC 4.0 ( 一 )","uri":"/zh-cn/onfi/"},{"categories":["ONFI"],"content":"Data Interface/Timing Mode转换 根据ONFI 4.0 SPEC描述为只有以下几种情况的mode可以切换 SDR to NV-DDR SDR to NV-DDR2 NV-DDR to SDR NV-DDR2 to SDR NV-DDR3无法转换到其他mode(这里只是说用户模式下，正常command无法切换，实际 上vendor是可以通过自己的测试模式进行切换，可以从NVDDR3-\u003e SDR模式)，1.2V情况默认上电即NV-DDR3 mode（有些device 1.2V情况下上电默认是DDR3 mode 0) 所有的mode切换都是通过set feature来设定。 未完待续！！！ ","date":"2021-05-11","objectID":"/zh-cn/onfi/:5:0","tags":["ONFI"],"title":"NAND FLASH ONFI SPEC 4.0 ( 一 )","uri":"/zh-cn/onfi/"},{"categories":["ONFI"],"content":"简介 在大容量NAND Package设计中，一个设计中可能存在很多个NAND Package，每个package中一般有2~8根CE# PIN。使用CE# Reduction机制可以让host的单个CE#被多个NAND pacakge复用,这样使得Host所需要的CE#引脚大大减少。 CE Reduction机制在初始化过程中，为每一个NAND指定一个Volume地址。初始化后，host可以通过volume选择命令(E1h)在选择指定的Volume。 Tips:这里要区分NAND中Package,Target,LUN的概念划分。可以参考下图 package.png 在物理连接上,通过ENo和ENI依次串联起所有的NAND Package。第一个Package的ENI不会连接，后面的Package依次连接到前一个Package的ENo信号。 在Power on的时候，ENo会被driver low。之后如果CE#被置成High状态，ENo对应为High-Z状态。如果CE#置成Low并set成对应的volume地址后，此时的ENo会被置高。 ENi状态决定了NAND package是否接受cmd。 如果CE# LOW and ENi Pin is High,那么就可以接受cmd；反之如果CE# high或者ENi low，则不能接受cmd。 ","date":"2021-05-10","objectID":"/zh-cn/onfi-ce-reduction/:0:1","tags":["ONFI"],"title":"CE Reduction","uri":"/zh-cn/onfi-ce-reduction/"},{"categories":["ONFI"],"content":"initial sequence host power on the NAND. host pulls CE# LOW. 如果resetting all NAND Parallel，host 发送Reset(FFh) command.此时Reset CMD会被所有的NAND Device接受到。 如果reseeting all NAND sequence (1). 只有ENi pin high的NAND device能接受到命令。 host发送set feature cmd 来设定Volume Configure(58h)。每个NAND target的Volume address应该都是独立的。发送set features 命令后，ENo被设置成High同时Volume is deselected，直到host发送Volume select(E1h)来选中指定的Volume。 ","date":"2021-05-10","objectID":"/zh-cn/onfi-ce-reduction/:0:2","tags":["ONFI"],"title":"CE Reduction","uri":"/zh-cn/onfi-ce-reduction/"},{"categories":["ONFI"],"content":"Volumn configure\u0026\u0026select vol_configure.png vol_select.png ","date":"2021-05-10","objectID":"/zh-cn/onfi-ce-reduction/:0:3","tags":["ONFI"],"title":"CE Reduction","uri":"/zh-cn/onfi-ce-reduction/"},{"categories":["ONFI"],"content":"常见的CE Reduction 拓扑结构 single.png two_channel.png ","date":"2021-05-10","objectID":"/zh-cn/onfi-ce-reduction/:0:4","tags":["ONFI"],"title":"CE Reduction","uri":"/zh-cn/onfi-ce-reduction/"},{"categories":["模拟电路"],"content":"比较器和误差放大器区别 输出结果的不一样 — 离散和连续的区别 ","date":"2021-05-10","objectID":"/zh-cn/%E6%AF%94%E8%BE%83%E5%99%A8%E5%92%8C%E8%AF%AF%E5%B7%AE%E5%99%A8/:1:0","tags":["模拟电路"],"title":"比较器和误差放大器","uri":"/zh-cn/%E6%AF%94%E8%BE%83%E5%99%A8%E5%92%8C%E8%AF%AF%E5%B7%AE%E5%99%A8/"},{"categories":["模拟电路"],"content":"比较器与放大器 运算放大器在不加负反馈的时候，从原理上来看可以用作比较器，但是由于放大器的开环增益非常高，它只能处理输入差分电压非常小的信号。而且在这种情况下，运算放大器的响应时间比比较器会慢很多，而且缺少一些特殊的功能，比如：滞回、内部基准。 比较器通常不能作为运算放大器，比较器经过调解可以提供极小的时间延迟，但是其频率响应特性会受到一定的限制，运算放大器正式利用了频响修整这个优势成为了灵活多用的器件。另外，许多比较器还有内部滞回电路，可以避免了输出震荡，但同时也让比较器不能当做当做运算放大器使用。 ","date":"2021-05-10","objectID":"/zh-cn/%E6%AF%94%E8%BE%83%E5%99%A8%E5%92%8C%E8%AF%AF%E5%B7%AE%E5%99%A8/:2:0","tags":["模拟电路"],"title":"比较器和误差放大器","uri":"/zh-cn/%E6%AF%94%E8%BE%83%E5%99%A8%E5%92%8C%E8%AF%AF%E5%B7%AE%E5%99%A8/"},{"categories":["模拟电路"],"content":"电源电压 传统的比较器需要$\\pm15V$的双电源或者高达36V的电源源供电。（一些运算放大器也需要双电源工作，满足输出条件，这一点个人认为并不能作为两者之间的区别） - 比较器两个输入端之间的电压在过零时候输出状态将发生改变，由于输入端通常有很小的波动电压，这些波动所产生的差模电压会导致比较器输出发生连续的变化。为了避免输出震荡，新型的比较器通常具有几mV的滞回电压。滞回电压的存在使比较器在切换点变为两个，一个用于检测上升电压，一一个用于检测下降电压。高电压门限$V_{TRIP+}$与低电压门限$V_{TRIP-}$之差等于滞回电压($V_{HYST}$),滞回比较器的失调电压$V_{OS}$是高电压门限和低电压门限的平均值。 1.png 不带滞回的比较器的输入电压切换点是输入失调电压，而不是理想比较器的零电压。失调电压(即切换电压)一般随温度、电源电压的变化而变化。通常用电源抑制比(PSRR)衡量这一影响，它表示标称电压的变化对失调电压的影响。理想的比较器的输入阻抗为无穷大，因此，理论上对输入信号不产生影响，而实际比较器的输入阻抗不可能做到无穷大，输入端有电流经过信号源内阻并流入比较器内部，从而产生额外的压差。偏置电流(IBIAS)定义为两个比较器输入电流的中值，用于衡量输入阻抗的影响。 ","date":"2021-05-10","objectID":"/zh-cn/%E6%AF%94%E8%BE%83%E5%99%A8%E5%92%8C%E8%AF%AF%E5%B7%AE%E5%99%A8/:3:0","tags":["模拟电路"],"title":"比较器和误差放大器","uri":"/zh-cn/%E6%AF%94%E8%BE%83%E5%99%A8%E5%92%8C%E8%AF%AF%E5%B7%AE%E5%99%A8/"},{"categories":["模拟电路"],"content":"比较器的输出 不同的输出状态。零电平或电源电压，具有满电源摆幅特性的比较器输出级为射极跟随器，这使得其输出信号与电源摆幅之间仅有极小的压差。该压差取决于比较器内部晶体管饱和状态下的集电极与发射极之间的电压。CMOS满摆幅比较器的输出电压取决于饱和状态下的MOSFET，与双极型晶体管结构相比，在轻载情况下电压更接近于电源电压。比较器属于 开环电路，比较输出端的$$u_1$$和$$u_2$$电压大小，当正输入端电压较大的时候，输出高电平(比较器属于OC输出，需要加上拉电阻，上拉几伏就输出几伏)；当负极电压较大的时候，输出低电平(GND). 输出延迟时间是选择比较器的关键参数。延迟时间包括信号通过元器件产生的传输延时和信号的上升时间与下降时间，对于高速比较器，如MAX961、MAX9010-MAX9013，其延迟时间的典型值分别达到4.5ns和5ns，上升时间为2.3ns和3ns (注意：传输延时的测量包含了上升时间)。设计时需注意不同因素对延迟时间的影响(图2)，其中包括温度、容性负载、输入过驱动等因素。对于反相输入，传输延时用tPD-表示；对于同相输入，传输延时用tPD+表示。TPD+与tPD-之差称为偏差。电源电压对传输延时也有较大影响。 ","date":"2021-05-10","objectID":"/zh-cn/%E6%AF%94%E8%BE%83%E5%99%A8%E5%92%8C%E8%AF%AF%E5%B7%AE%E5%99%A8/:4:0","tags":["模拟电路"],"title":"比较器和误差放大器","uri":"/zh-cn/%E6%AF%94%E8%BE%83%E5%99%A8%E5%92%8C%E8%AF%AF%E5%B7%AE%E5%99%A8/"},{"categories":["模拟电路"],"content":"实际比较器应用 第1个例子是电平转换器，可完成3V逻辑至5V逻辑的变换。 2.png 如图4所示，漏极开路输出比较器，如MAX986，提供了一个极为简捷的实现方案，同样，如果比较器供电电压允许(如MAX972)，也可实现±5V双极性逻辑至3V单极性逻辑的电平转换。具体应用时应注意输入信号不要超出电源电压的摆幅，流入输出端的电流由大阻值的上拉电阻限制(参考MAX986数据资料的Absolute Maximum Ratings)。 该电路可将双极性输入（这里为正弦波)转换为单极性的方波输出，外加的偏置电压为 3.png $$V_{OS}=\\frac{V_{CC}R_1R_2+V_2R_1R_3}{R_1R_2+R_1R_3+R_2R_3}$$ 两个阻值相同的电阻(R4)将比较器切换检测门限设置在电源电压的一半。 图6所示是利用四个比较器构成一个电流检测电路，可用于指示输入电流的四个范围，旁路电阻用于将输入电流转换为电压信号，R1-R2用于设置运算放大器的增益，并为比较器提供所需要的基准电压。R4-R7用来设置不同数字输出状态所对应的检测门限。 4.png ","date":"2021-05-10","objectID":"/zh-cn/%E6%AF%94%E8%BE%83%E5%99%A8%E5%92%8C%E8%AF%AF%E5%B7%AE%E5%99%A8/:5:0","tags":["模拟电路"],"title":"比较器和误差放大器","uri":"/zh-cn/%E6%AF%94%E8%BE%83%E5%99%A8%E5%92%8C%E8%AF%AF%E5%B7%AE%E5%99%A8/"},{"categories":["模拟电路"],"content":"理想集成运放特点 开环差模电压放大倍数$A_{u0}\\rightarrow\\infty$ 输入阻抗$R_{id}\\rightarrow\\infty$ 输出阻抗$R_{o}\\rightarrow0$ 共模抑制比$K_{CMR}\\rightarrow\\infty$ 此外认为器件的频带为无限宽，没有失调现象等 **Addition：**差分式放大电路，就其功能来说就时放大两个输入信号之差。在电路完全对称的情况下，输出信号电压可以表示为$V_o=A_{uo}(V_{i1}-V_{i2})$ ","date":"2021-05-10","objectID":"/zh-cn/%E9%9B%86%E6%88%90%E8%BF%90%E7%AE%97%E6%94%BE%E5%A4%A7%E7%94%B5%E8%B7%AF/:1:0","tags":["模拟电路"],"title":"集成运算放大电路","uri":"/zh-cn/%E9%9B%86%E6%88%90%E8%BF%90%E7%AE%97%E6%94%BE%E5%A4%A7%E7%94%B5%E8%B7%AF/"},{"categories":["模拟电路"],"content":"工作在线性区的集成运放 由于理想集成运放$A_{uo}\\rightarrow\\infty$,故可以认为两个输入端之间的差模电压近似为零，即$u_{id}=u_–u_+\\approx0$即$u_-=u_+$,由于两个输入端之间的电压近似为零，而又不是短路，故称为**“虚短”** 由于理想集成运放的输入电阻$R_{id}\\rightarrow\\infty$,故可以认为两个输入端不娶电流，这样输入相当于断路，而又不是断开，所以称为**“虚断”**。 ","date":"2021-05-10","objectID":"/zh-cn/%E9%9B%86%E6%88%90%E8%BF%90%E7%AE%97%E6%94%BE%E5%A4%A7%E7%94%B5%E8%B7%AF/:1:1","tags":["模拟电路"],"title":"集成运算放大电路","uri":"/zh-cn/%E9%9B%86%E6%88%90%E8%BF%90%E7%AE%97%E6%94%BE%E5%A4%A7%E7%94%B5%E8%B7%AF/"},{"categories":["模拟电路"],"content":"基本运算电路 比例运算电路 根据虚短和虚断的特点，反向输入端与地端等电位（称为**“虚地”），因此计算可得 $$i_1=\\frac{u_1}{R_1},i_F=\\frac{u_–u_o}{R_f}=\\frac{-uo}{R_f}$$ 又因$i_-=0$,故$i_1=i_F$则可得$u_o=-\\frac{R_f}{R_1}u_1$ 式中负号表示输出电压与输入点的相位相反。 其中电压放大倍数为$$A_{uf}=\\frac{uo}{u_i}=-\\frac{R_f}{R_1}$$改变$R_f$和$R_1$的比值，即可改变其放大倍数。 图中运放的同相输入端接有电阻$R_2$,参数选择应使两输入端外界直流通路等效电阻值平衡，即$R_2=R_1//R_f$,静态时使输入级偏置电流平衡并让输入级的偏置电流在运算放大器两个输入端的外接电阻上产生相等的压降，以便消除放大器的偏置电流以及漂移的影响，故$R_2$又称为平衡电阻** 同相比例运算电路 如果输入信号从同相输入端输入，而反向输入端通过电阻接地，并引入负反馈，这种称为同比例运算电路 由虚短、虚短性质可知 $u_-=\\frac{R_1}{R_1+R_f}u_o=u_+=u_I$ $$i_F=\\frac{u_-u_0}{R} ①$$ $$i_1=-\\frac{u_-}{R_1}②$$ 可以推出$$u_o=\\left(1+\\frac{R_f}{R_1}\\right)u_1$$ 则电压放大倍数为$$A_{uf}=\\frac{u_o}{u_1}=1+\\frac{R_f}{R_1}$$ 由上式可以看出电路的与反相比例运算电路一样，输入输出也是符号比例关系，不同的是输出电压与输入电压相位相同。 如果此时去掉$R_1$是的输入和输出电压相同，起到电压跟随作用，故称为这样的电路为电压跟随器如下图所示 加法运算电路 如下图所示是对两个输入限号求和的电路，信号有反向输入端引入，同相端通过一个电阻接地,如下所示称为加法电路 由上图可以计算如下 $$i_{11}=\\frac{u_{11}}{R_1}$$ $$i_{12}=\\frac{u_{12}}{R_2}$$ $$i_{11}+i_{12}=i_f$$ 不难推出$$u_o=\\left(\\frac{u_{11}}{R_1}+\\frac{u_{12}}{R_2}\\right)-R_f$$ 当$\\begin{smallmatrix}R_1=R_2=R\\end{smallmatrix}$ 时 $$u_o=-\\frac{R_f}{R}(u_{11}+u_{12})$$ 减法运算电路 当在同相和方向输入端分别加入两个信号时候，如下所示称为差分运算电路 根据虚短、虚断原理来计算可以得: $$\\left(\\frac{u_{11}-u_-}{R_1}\\right)=\\left(\\frac{u_–u_o}{R_f}\\right)\\Rightarrow uo=\\left(1+\\frac{R_f}{R_1}\\right)u_+-\\frac{R_f}{R_1}u_{11}$$ 其中: $\\begin{smallmatrix}u_-=u_+=(\\frac{R_f}{R_1+R_f})u_{12}\\end{smallmatrix}$ 如果: $\\begin{smallmatrix}R_1=R’_{1},R_f=R’_f\\end{smallmatrix}$ 可以证明输入电压为: $$u_o=\\frac{R_{f}}{R_{1}}(u_{12}-u_{11})$$ 上式表明，适当选择电阻参数，是的输出电压与两个输入电压的差值成比例，故差值放大电路也称为加法运算电路。 归类总结 相位 种类 特点 同相 同相比例运算电路 电压跟随器 同相 减法运算电路 输出端透过一个电阻连接反向输入端 反相 反向比例运算电路 同相输入透过电阻接地 反向 加法运算电路 同相输入端透过一个电阻接地，反向输入端两个输入电压 ","date":"2021-05-10","objectID":"/zh-cn/%E9%9B%86%E6%88%90%E8%BF%90%E7%AE%97%E6%94%BE%E5%A4%A7%E7%94%B5%E8%B7%AF/:1:2","tags":["模拟电路"],"title":"集成运算放大电路","uri":"/zh-cn/%E9%9B%86%E6%88%90%E8%BF%90%E7%AE%97%E6%94%BE%E5%A4%A7%E7%94%B5%E8%B7%AF/"},{"categories":["模拟电路"],"content":"积分与微积分电路 基本积分电路 如下图是一个基本积分电路 因为$i_-=i_+=0$,故$u_-=u_+=0$流过电阻R的电流和流过电容C的电流可以认为近似相等，即$\\begin{smallmatrix}i_c=i_1=\\frac{u_1}{R}\\end{smallmatrix}$,对该电流对电容镜像充电，电容两端电压即为输入电压，故 $$u_o=-\\frac{1}{C}\\int_{t0}^ti_c,\\mathrm{d}t+uc\\mid_{t0} = -\\frac{1}{RC}\\int_{t0}^{t}u_1,\\mathrm{d}t+uc\\mid_{t0}$$其中$\\begin{smallmatrix}u_c\\mid_{t0}\\end{smallmatrix}$是$t_0$时刻电容两端的电压，即初始值。 基本微分电路 将积分电路中电阻和电容元件位置对换，便构成了基本微分电路如下图所示 ","date":"2021-05-10","objectID":"/zh-cn/%E9%9B%86%E6%88%90%E8%BF%90%E7%AE%97%E6%94%BE%E5%A4%A7%E7%94%B5%E8%B7%AF/:2:0","tags":["模拟电路"],"title":"集成运算放大电路","uri":"/zh-cn/%E9%9B%86%E6%88%90%E8%BF%90%E7%AE%97%E6%94%BE%E5%A4%A7%E7%94%B5%E8%B7%AF/"},{"categories":["模拟电路"],"content":"例题 积分电路计算 电路如下图所示 写出输入与输出关系； 若$u_1=+1V$，电容器两端初始电压$u_c=0$，求：输出电压$u_o$变为0V所需要的时间。 解：有图可知，图中$A_1$为积分器，$A_2$为反向加法器，所以可以推出： $$u_{o1}=-\\frac{1}{RC}\\int_{t0}^{t1}u_1,\\mathrm{d}t+u_c\\mid_{t0=0}$$ $$u_0=-u_{01}-u_1$$ (2) 因$\\begin{smallmatrix}u_c\\mid_{t0=0}=0,u_1=+1V\\end{smallmatrix}$则 $$u_o=\\frac{u_1}{RC}t_1-u_1=0$$ 故$$t_1=RC=10S$$ ","date":"2021-05-10","objectID":"/zh-cn/%E9%9B%86%E6%88%90%E8%BF%90%E7%AE%97%E6%94%BE%E5%A4%A7%E7%94%B5%E8%B7%AF/:3:0","tags":["模拟电路"],"title":"集成运算放大电路","uri":"/zh-cn/%E9%9B%86%E6%88%90%E8%BF%90%E7%AE%97%E6%94%BE%E5%A4%A7%E7%94%B5%E8%B7%AF/"},{"categories":["开关电源"],"content":"基本分类介绍 硬开关 当晶体管上的电压（或电流）尚未到零时，强迫开关管开端或管段，这时开关管的电压下降或上升和电流的上升和下降有一个交叠的过程，使得开关过程中管子上有损耗，这种开关方式成为硬开关 硬软开关 与硬开关相对，当晶体管开关在电压为零的时候开通，或电流为零的时候管段，从而使得开关损耗接近于零，这种开关的方式成为软开关 谐振 在理想的LC并联电路上加正弦电流源时，电路的总导纳为零，元件上的电压为无穷大，这种现象为并联谐振，电路谐振时有一下两个重要参数 （1）谐振频率：谐振时的电路频率 ω = 1/√LC （2）特征频率：谐振时，感抗等于容抗，其值为Z=√(L/C)，称为特征阻抗。当LC串联电路上突加直流电压时，电路中的电流按照正弦规律无阻尼振荡，其频率即为电路的谐振频率也称为振荡频率 准谐振 对于有开关的LC串联电路，点电流按照谐振振荡时，如果开关动作，使得电流正弦振荡只在一个周期的部分时间内发生，则电路会呈准正弦，这一现象称为准谐振。同样在LC并联电路中，借助开关动作，也可获得准谐振。 零电压开通 利用谐振现象。当开关变换器中的器件电压按照正弦规律振荡到零时，使得器件开通，称为ZVS 即零电压开通 零电流关断 同理，当开关变换器中的器件电流按正弦规律振荡到零时，使器件关断称之为 ZCS 保持时间 保持时间是指交流输入电源发生故障后，电源能保持输出电压不变的时间 拓扑结构 拓扑结构指变换器的电路结构类型。常用变换器的电路结构有反激式、正激式、半桥式、全桥式、谐振式和软开关式等。 ","date":"2021-05-10","objectID":"/zh-cn/%E5%BC%80%E5%85%B3%E7%94%B5%E6%BA%90/:1:0","tags":["开关电源"],"title":"开关电源归类","uri":"/zh-cn/%E5%BC%80%E5%85%B3%E7%94%B5%E6%BA%90/"},{"categories":["开关电源"],"content":"电路拓扑结构设计选择常见问题 占空比 输出电压和输入电压是否相差5倍以上，如果是可能就需要用变压器，计算合适的占空比，提高效率。 电源需要空载工作吗？ 如果是，建议变换器工作与电流断续模式，除非采用同步整流。 如果能够使用同步整流，不管负载大小如果，都可以使得变换器工作于电流连续模式。 输出电流大吗？ 如果有大输出电流，选用电压模式控制要比电流模式控制要好。 ","date":"2021-05-10","objectID":"/zh-cn/%E5%BC%80%E5%85%B3%E7%94%B5%E6%BA%90/:2:0","tags":["开关电源"],"title":"开关电源归类","uri":"/zh-cn/%E5%BC%80%E5%85%B3%E7%94%B5%E6%BA%90/"},{"categories":["模拟电路"],"content":"为什么要将运算放大器用作比较器？ 方便 经济 低$I_B$ 低$V_{OS}$ 比较器专门针对干净快速的切换而设计的，所有许多直流参数不如运算放大器。当电路 对直流参数有较高要求的时候可以考虑使用运算放大器。反之如果电路中速度很重要就不能使用。 ","date":"2021-05-10","objectID":"/zh-cn/%E8%BF%90%E7%AE%97%E6%94%BE%E5%A4%A7%E5%99%A8%E7%94%A8%E4%BD%9C%E6%AF%94%E8%BE%83%E5%99%A8/:1:0","tags":["模拟电路"],"title":"运算放大器用作比较器","uri":"/zh-cn/%E8%BF%90%E7%AE%97%E6%94%BE%E5%A4%A7%E5%99%A8%E7%94%A8%E4%BD%9C%E6%AF%94%E8%BE%83%E5%99%A8/"},{"categories":["模拟电路"],"content":"为什么大多数情况不把运算放大器用作比较器 速度 输入结构不方便 逻辑结构不方便 稳定性/迟滞 ","date":"2021-05-10","objectID":"/zh-cn/%E8%BF%90%E7%AE%97%E6%94%BE%E5%A4%A7%E5%99%A8%E7%94%A8%E4%BD%9C%E6%AF%94%E8%BE%83%E5%99%A8/:2:0","tags":["模拟电路"],"title":"运算放大器用作比较器","uri":"/zh-cn/%E8%BF%90%E7%AE%97%E6%94%BE%E5%A4%A7%E5%99%A8%E7%94%A8%E4%BD%9C%E6%AF%94%E8%BE%83%E5%99%A8/"},{"categories":["模拟电路"],"content":"许多比较器的速度都非常快,为什么将运算放大器用作比较器时造成低速度? 比较器设计用于大差分输入电压，而运算放大器一般用于驱动闭环系统，在负反馈的作用下，其输入电压差降至非常低.当运算放大器过载时候，有时候几毫伏也可能导致过载，其中有些放大级可能发生饱和。这种情况下，器件要相对较长的时候从饱和中恢复，如果发生饱和，其速度将慢很多。 现代运算放大器多采用轨到轨输出，其最大正电平接近正电源，最低负电平接近负电源。(老式设计所用架构的两个供电轨都具有1.5 V以上的动态余量。) 如果逻辑和运算放大器共用同一电源，轨到轨运算放大器可成功驱动CMOS和TTL逻辑系列，但是，如果运算放大器和逻辑采用不同电源，则需在两者之间另外设置接口电路。注意，这种情况采用于采用±5 V电源的运算放大器，必须用+5 V电源驱动逻辑；如果施加-5 V电源，则可能损坏逻辑。 最简单的接口电路就是变换器，可能以NPN晶体管制成，但这些元件需会基极吸取电流。更为方便的是N-沟道MOSFET晶体管。如下图所示 1.png RB设定晶体管基极电流，RL则设定集电极/漏极的电流。该电流越小，变换器速度就越快，但其功耗也越大。通常使用几千欧姆的数值。N-沟道MOS器件应采用低栅极阈值电压(\u003c2 V)和高于运算放大器最大输出电压的栅源击穿电压。一般±25 V就够了。尽管运算放大器和逻辑使用不同的电源，但必须相互连接。运算放大器正电源+VA必须比逻辑负电源-VL高至少3 V，才能提供足够电压来开启晶体管或MOSFET栅极。另外，运算放大器负电源相对于逻辑负电源不能为正，但可与其相连。当然，必须遵循全部所用器件的绝对最大额定值。 补充MOS变换器可采用一个P-沟道和一个N-沟道MOSFET。这样做的优势在于没有待机电流，但在切换过程中，两个器件同时开启时会产生大电流尖峰。在这种设计中，运算放大器正电源+VA必须等于或大于逻辑正电源+VL。另外，运算放大器负电源必须等于或小于逻辑负电源。如下图所示 2.png ","date":"2021-05-10","objectID":"/zh-cn/%E8%BF%90%E7%AE%97%E6%94%BE%E5%A4%A7%E5%99%A8%E7%94%A8%E4%BD%9C%E6%AF%94%E8%BE%83%E5%99%A8/:2:1","tags":["模拟电路"],"title":"运算放大器用作比较器","uri":"/zh-cn/%E8%BF%90%E7%AE%97%E6%94%BE%E5%A4%A7%E5%99%A8%E7%94%A8%E4%BD%9C%E6%AF%94%E8%BE%83%E5%99%A8/"},{"categories":["模拟电路"],"content":"注意事项 ","date":"2021-05-10","objectID":"/zh-cn/%E8%BF%90%E7%AE%97%E6%94%BE%E5%A4%A7%E5%99%A8%E7%94%A8%E4%BD%9C%E6%AF%94%E8%BE%83%E5%99%A8/:3:0","tags":["模拟电路"],"title":"运算放大器用作比较器","uri":"/zh-cn/%E8%BF%90%E7%AE%97%E6%94%BE%E5%A4%A7%E5%99%A8%E7%94%A8%E4%BD%9C%E6%AF%94%E8%BE%83%E5%99%A8/"},{"categories":["模拟电路"],"content":"相位反转 老式FET输入放大器，会有相位翻转的现象。如果输入超过允许的共模范围，反相和同相输入将互换角色。 ","date":"2021-05-10","objectID":"/zh-cn/%E8%BF%90%E7%AE%97%E6%94%BE%E5%A4%A7%E5%99%A8%E7%94%A8%E4%BD%9C%E6%AF%94%E8%BE%83%E5%99%A8/:3:1","tags":["模拟电路"],"title":"运算放大器用作比较器","uri":"/zh-cn/%E8%BF%90%E7%AE%97%E6%94%BE%E5%A4%A7%E5%99%A8%E7%94%A8%E4%BD%9C%E6%AF%94%E8%BE%83%E5%99%A8/"},{"categories":["模拟电路"],"content":"不稳定性 将运放用作比较器的时候没有负反馈，开环增益非常高。在跃迁期间即使是很小的正反馈也可能激发震荡。反馈可能来自输出与同相输入之间的电容，也可能来自共地阻抗中存在的输出电流。 ","date":"2021-05-10","objectID":"/zh-cn/%E8%BF%90%E7%AE%97%E6%94%BE%E5%A4%A7%E5%99%A8%E7%94%A8%E4%BD%9C%E6%AF%94%E8%BE%83%E5%99%A8/:3:2","tags":["模拟电路"],"title":"运算放大器用作比较器","uri":"/zh-cn/%E8%BF%90%E7%AE%97%E6%94%BE%E5%A4%A7%E5%99%A8%E7%94%A8%E4%BD%9C%E6%AF%94%E8%BE%83%E5%99%A8/"}]